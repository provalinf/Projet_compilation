
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 05 18:56:05 CEST 2018
//----------------------------------------------------

package analyse;

import java.util.*;
import arbre.*;
import arbre.instruction.*;
import arbre.fonctions.*;
import arbre.expression.*;
import arbre.comparaison.*;
import tds.*;
import exceptions.AnalyseSyntaxiqueException;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 05 18:56:05 CEST 2018
  */
public class AnalyseurSyntaxique extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalyseurSyntaxique() {super();}

  /** Constructor which sets the default scanner. */
  public AnalyseurSyntaxique(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalyseurSyntaxique(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\002\007\000\002\003\004\000\002\003\003" +
    "\000\002\004\004\000\002\004\003\000\002\016\005\000" +
    "\002\016\003\000\002\011\005\000\002\011\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\005\000\002\005\003\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\004\000\002\014\005\000\002\014\005\000\002\014" +
    "\004\000\002\014\003\000\002\014\005\000\002\014\005" +
    "\000\002\014\006\000\002\014\003\000\002\006\006\000" +
    "\002\007\005\000\002\007\005\000\002\012\007\000\002" +
    "\010\007\000\002\010\006\000\002\010\011\000\002\010" +
    "\010\000\002\010\010\000\002\010\007\000\002\015\003" +
    "\000\002\015\003\000\002\013\015\000\002\013\014\000" +
    "\002\017\006\000\002\017\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\004\004\005\001\002\000\004\002\166\001" +
    "\002\000\004\045\006\001\002\000\004\005\007\001\002" +
    "\000\020\010\012\011\017\012\023\015\027\021\015\041" +
    "\021\045\013\001\002\000\022\006\162\010\012\011\017" +
    "\012\023\015\027\021\015\041\021\045\013\001\002\000" +
    "\026\006\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1" +
    "\017\ufff1\020\ufff1\022\ufff1\045\ufff1\001\002\000\020\024" +
    "\034\027\037\040\036\042\032\043\035\044\157\045\031" +
    "\001\002\000\004\033\153\001\002\000\026\006\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\017\ufff4\020\ufff4" +
    "\022\ufff4\045\ufff4\001\002\000\004\045\125\001\002\000" +
    "\026\006\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5" +
    "\017\ufff5\020\ufff5\022\ufff5\045\ufff5\001\002\000\004\045" +
    "\123\001\002\000\026\006\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\014\ufff3\015\ufff3\017\ufff3\020\ufff3\022\ufff3\045\ufff3\001" +
    "\002\000\004\045\121\001\002\000\026\006\ufffc\010\ufffc" +
    "\011\ufffc\012\ufffc\014\ufffc\015\ufffc\017\ufffc\020\ufffc\022" +
    "\ufffc\045\ufffc\001\002\000\016\024\034\027\037\040\036" +
    "\042\032\043\035\045\031\001\002\000\022\006\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\015\ufffa\021\ufffa\041\ufffa\045\ufffa" +
    "\001\002\000\022\006\ufff6\010\ufff6\011\ufff6\012\ufff6\015" +
    "\ufff6\021\ufff6\041\ufff6\045\ufff6\001\002\000\016\006\114" +
    "\010\012\011\017\012\023\015\027\045\013\001\002\000" +
    "\016\024\034\027\037\040\036\042\032\043\035\045\031" +
    "\001\002\000\030\016\077\023\044\024\051\025\042\026" +
    "\045\031\053\032\046\034\052\035\047\036\043\037\050" +
    "\001\002\000\040\007\uffe0\013\uffe0\016\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\070\030\uffe0\031\uffe0\032\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\001\002\000\036\007" +
    "\uffd5\013\uffd5\016\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\034\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\001\002\000\036\007\uffe4\013\uffe4\016\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\030\uffe4\031\uffe4\032\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\001\002\000\016\024\034" +
    "\027\037\040\036\042\032\043\035\045\031\001\002\000" +
    "\036\007\uffd4\013\uffd4\016\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\030\uffd4\031\uffd4\032\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\001\002\000\016\024\034\027\037\040\036" +
    "\042\032\043\035\045\031\001\002\000\016\024\034\027" +
    "\037\040\036\042\032\043\035\045\031\001\002\000\030" +
    "\023\044\024\051\025\042\026\045\030\041\031\053\032" +
    "\046\034\052\035\047\036\043\037\050\001\002\000\036" +
    "\007\uffe3\013\uffe3\016\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\001\002\000\016\024\034\027\037\040\036\042" +
    "\032\043\035\045\031\001\002\000\016\024\034\027\037" +
    "\040\036\042\032\043\035\045\031\001\002\000\016\024" +
    "\034\027\037\040\036\042\032\043\035\045\031\001\002" +
    "\000\016\024\034\027\037\040\036\042\032\043\035\045" +
    "\031\001\002\000\016\024\034\027\037\040\036\042\032" +
    "\043\035\045\031\001\002\000\016\024\034\027\037\040" +
    "\036\042\032\043\035\045\031\001\002\000\016\024\034" +
    "\027\037\040\036\042\032\043\035\045\031\001\002\000" +
    "\016\024\034\027\037\040\036\042\032\043\035\045\031" +
    "\001\002\000\016\024\034\027\037\040\036\042\032\043" +
    "\035\045\031\001\002\000\016\024\034\027\037\040\036" +
    "\042\032\043\035\045\031\001\002\000\036\007\uffeb\013" +
    "\uffeb\016\uffeb\023\044\024\051\025\042\026\045\030\uffeb" +
    "\031\uffeb\032\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\001" +
    "\002\000\036\007\uffea\013\uffea\016\uffea\023\044\024\051" +
    "\025\042\026\045\030\uffea\031\053\032\046\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\001\002\000\036\007\uffef\013\uffef" +
    "\016\uffef\023\uffef\024\uffef\025\042\026\045\030\uffef\031" +
    "\uffef\032\uffef\034\uffef\035\uffef\036\uffef\037\uffef\001\002" +
    "\000\036\007\uffe6\013\uffe6\016\uffe6\023\044\024\051\025" +
    "\042\026\045\030\uffe6\031\053\032\046\034\052\035\047" +
    "\036\043\037\uffe6\001\002\000\036\007\uffe9\013\uffe9\016" +
    "\uffe9\023\044\024\051\025\042\026\045\030\uffe9\031\053" +
    "\032\046\034\uffe9\035\uffe9\036\uffe9\037\uffe9\001\002\000" +
    "\036\007\uffec\013\uffec\016\uffec\023\044\024\051\025\042" +
    "\026\045\030\uffec\031\uffec\032\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\001\002\000\036\007\uffed\013\uffed\016\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\030\uffed\031\uffed\032" +
    "\uffed\034\uffed\035\uffed\036\uffed\037\uffed\001\002\000\036" +
    "\007\ufff0\013\ufff0\016\ufff0\023\ufff0\024\ufff0\025\042\026" +
    "\045\030\ufff0\031\ufff0\032\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\001\002\000\036\007\uffe7\013\uffe7\016\uffe7\023" +
    "\044\024\051\025\042\026\045\030\uffe7\031\053\032\046" +
    "\034\052\035\047\036\uffe7\037\uffe7\001\002\000\036\007" +
    "\uffee\013\uffee\016\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\030\uffee\031\uffee\032\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\001\002\000\036\007\uffe5\013\uffe5\016\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\001\002\000\036\007\uffe8" +
    "\013\uffe8\016\uffe8\023\uffe8\024\uffe8\025\042\026\045\030" +
    "\uffe8\031\uffe8\032\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\001\002\000\020\024\034\027\037\030\071\040\036\042" +
    "\032\043\035\045\031\001\002\000\036\007\uffe2\013\uffe2" +
    "\016\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\001\002" +
    "\000\006\007\074\030\075\001\002\000\032\007\ufff8\023" +
    "\044\024\051\025\042\026\045\030\ufff8\031\053\032\046" +
    "\034\052\035\047\036\043\037\050\001\002\000\016\024" +
    "\034\027\037\040\036\042\032\043\035\045\031\001\002" +
    "\000\036\007\uffe1\013\uffe1\016\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\030\uffe1\031\uffe1\032\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\001\002\000\032\007\ufff9\023\044\024" +
    "\051\025\042\026\045\030\ufff9\031\053\032\046\034\052" +
    "\035\047\036\043\037\050\001\002\000\020\010\012\011" +
    "\017\012\023\015\027\017\101\020\100\045\013\001\002" +
    "\000\026\006\uffda\010\uffda\011\uffda\012\uffda\014\uffda\015" +
    "\uffda\017\uffda\020\uffda\022\uffda\045\uffda\001\002\000\016" +
    "\010\012\011\017\012\023\015\027\020\111\045\013\001" +
    "\002\000\020\010\012\011\017\012\023\015\027\017\105" +
    "\020\104\045\013\001\002\000\026\006\ufffd\010\ufffd\011" +
    "\ufffd\012\ufffd\014\ufffd\015\ufffd\017\ufffd\020\ufffd\022\ufffd" +
    "\045\ufffd\001\002\000\026\006\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\014\uffdb\015\uffdb\017\uffdb\020\uffdb\022\uffdb\045\uffdb" +
    "\001\002\000\016\010\012\011\017\012\023\015\027\020" +
    "\106\045\013\001\002\000\026\006\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8\022\uffd8\045" +
    "\uffd8\001\002\000\016\010\012\011\017\012\023\015\027" +
    "\020\110\045\013\001\002\000\026\006\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\014\uffd9\015\uffd9\017\uffd9\020\uffd9\022\uffd9" +
    "\045\uffd9\001\002\000\026\006\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6\022\uffd6\045\uffd6" +
    "\001\002\000\016\010\012\011\017\012\023\015\027\020" +
    "\113\045\013\001\002\000\026\006\uffd7\010\uffd7\011\uffd7" +
    "\012\uffd7\014\uffd7\015\uffd7\017\uffd7\020\uffd7\022\uffd7\045" +
    "\uffd7\001\002\000\004\002\uffff\001\002\000\030\013\116" +
    "\023\044\024\051\025\042\026\045\031\053\032\046\034" +
    "\052\035\047\036\043\037\050\001\002\000\014\010\012" +
    "\011\017\012\023\015\027\045\013\001\002\000\016\010" +
    "\012\011\017\012\023\014\120\015\027\045\013\001\002" +
    "\000\026\006\uffdc\010\uffdc\011\uffdc\012\uffdc\014\uffdc\015" +
    "\uffdc\017\uffdc\020\uffdc\022\uffdc\045\uffdc\001\002\000\004" +
    "\007\122\001\002\000\022\006\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\015\ufff7\021\ufff7\041\ufff7\045\ufff7\001\002\000\004" +
    "\007\124\001\002\000\026\006\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\014\ufff2\015\ufff2\017\ufff2\020\ufff2\022\ufff2\045\ufff2" +
    "\001\002\000\004\027\126\001\002\000\006\030\130\041" +
    "\131\001\002\000\006\007\141\030\142\001\002\000\004" +
    "\005\133\001\002\000\004\045\132\001\002\000\006\007" +
    "\uffd0\030\uffd0\001\002\000\014\010\012\011\017\012\023" +
    "\015\027\045\013\001\002\000\016\010\012\011\017\012" +
    "\023\015\027\022\135\045\013\001\002\000\016\024\034" +
    "\027\037\040\036\042\032\043\035\045\031\001\002\000" +
    "\030\007\137\023\044\024\051\025\042\026\045\031\053" +
    "\032\046\034\052\035\047\036\043\037\050\001\002\000" +
    "\004\006\140\001\002\000\022\006\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\015\uffd2\021\uffd2\041\uffd2\045\uffd2\001\002\000" +
    "\004\041\151\001\002\000\004\005\143\001\002\000\014" +
    "\010\012\011\017\012\023\015\027\045\013\001\002\000" +
    "\016\010\012\011\017\012\023\015\027\022\145\045\013" +
    "\001\002\000\016\024\034\027\037\040\036\042\032\043" +
    "\035\045\031\001\002\000\030\007\147\023\044\024\051" +
    "\025\042\026\045\031\053\032\046\034\052\035\047\036" +
    "\043\037\050\001\002\000\004\006\150\001\002\000\022" +
    "\006\uffd3\010\uffd3\011\uffd3\012\uffd3\015\uffd3\021\uffd3\041" +
    "\uffd3\045\uffd3\001\002\000\004\045\152\001\002\000\006" +
    "\007\uffd1\030\uffd1\001\002\000\016\024\034\027\037\040" +
    "\036\042\032\043\035\045\031\001\002\000\030\007\155" +
    "\023\044\024\051\025\042\026\045\031\053\032\046\034" +
    "\052\035\047\036\043\037\050\001\002\000\026\006\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\014\uffdf\015\uffdf\017\uffdf\020" +
    "\uffdf\022\uffdf\045\uffdf\001\002\000\030\007\161\023\044" +
    "\024\051\025\042\026\045\031\053\032\046\034\052\035" +
    "\047\036\043\037\050\001\002\000\004\007\160\001\002" +
    "\000\026\006\uffdd\010\uffdd\011\uffdd\012\uffdd\014\uffdd\015" +
    "\uffdd\017\uffdd\020\uffdd\022\uffdd\045\uffdd\001\002\000\026" +
    "\006\uffde\010\uffde\011\uffde\012\uffde\014\uffde\015\uffde\017" +
    "\uffde\020\uffde\022\uffde\045\uffde\001\002\000\004\002\ufffe" +
    "\001\002\000\022\006\ufffb\010\ufffb\011\ufffb\012\ufffb\015" +
    "\ufffb\021\ufffb\041\ufffb\045\ufffb\001\002\000\016\006\165" +
    "\010\012\011\017\012\023\015\027\045\013\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\025\004\007" +
    "\005\021\006\015\007\010\010\017\011\023\012\013\013" +
    "\024\001\001\000\022\003\163\005\021\006\015\007\010" +
    "\010\017\011\162\012\013\013\024\001\001\000\002\001" +
    "\001\000\006\014\155\015\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\114\015\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\102\006\015\007\010" +
    "\010\017\012\013\001\001\000\006\014\027\015\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\066\015\032\001\001\000" +
    "\002\001\001\000\006\014\065\015\032\001\001\000\006" +
    "\014\037\015\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\064\015\032\001\001\000\006\014\063" +
    "\015\032\001\001\000\006\014\062\015\032\001\001\000" +
    "\006\014\061\015\032\001\001\000\006\014\060\015\032" +
    "\001\001\000\006\014\057\015\032\001\001\000\006\014" +
    "\056\015\032\001\001\000\006\014\055\015\032\001\001" +
    "\000\006\014\054\015\032\001\001\000\006\014\053\015" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\072\015\032\016\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\075\015" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\101\005\021\006\015\007\010\010\017\012\013\001" +
    "\001\000\002\001\001\000\016\003\111\005\021\006\015" +
    "\007\010\010\017\012\013\001\001\000\014\005\102\006" +
    "\015\007\010\010\017\012\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\106\005\021\006\015\007" +
    "\010\010\017\012\013\001\001\000\002\001\001\000\014" +
    "\005\102\006\015\007\010\010\017\012\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\102\006\015" +
    "\007\010\010\017\012\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\116\005\021" +
    "\006\015\007\010\010\017\012\013\001\001\000\014\005" +
    "\102\006\015\007\010\010\017\012\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\133\005\021\006\015" +
    "\007\010\010\017\012\013\001\001\000\014\005\102\006" +
    "\015\007\010\010\017\012\013\001\001\000\006\014\135" +
    "\015\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\143\005\021\006\015\007\010\010\017\012\013\001" +
    "\001\000\014\005\102\006\015\007\010\010\017\012\013" +
    "\001\001\000\006\014\145\015\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\153\015\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\102\006\015\007\010" +
    "\010\017\012\013\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalyseurSyntaxique$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalyseurSyntaxique$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalyseurSyntaxique$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.PLUS), "+") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MOINS), "-") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MULT), "*") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIV), "/") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PAROUV), "(") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PARFER), ")") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SUP), ">") ;
        lesTerminaux.put(new Integer(CodesLexicaux.INF), "<") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGALEGAL), "==") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIFF), "!=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ET), "et") ;
        lesTerminaux.put(new Integer(CodesLexicaux.OU), "ou") ;
        lesTerminaux.put(new Integer(CodesLexicaux.NON), "non") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CONSTANTEINT, "" + s.value) ;
                lesTerminaux.put(CodesLexicaux.CONSTANTEBOOL, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non terminée") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalyseurSyntaxique$actions {

 
             
  private final AnalyseurSyntaxique parser;

  /** Constructor */
  CUP$AnalyseurSyntaxique$actions(AnalyseurSyntaxique parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalyseurSyntaxique$do_action(
    int                        CUP$AnalyseurSyntaxique$act_num,
    java_cup.runtime.lr_parser CUP$AnalyseurSyntaxique$parser,
    java.util.Stack            CUP$AnalyseurSyntaxique$stack,
    int                        CUP$AnalyseurSyntaxique$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalyseurSyntaxique$result;

      /* select the action based on the action number */
      switch (CUP$AnalyseurSyntaxique$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LPARAMS ::= TYPE IDF 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
            EntreeParam entree = new EntreeParam(i);
            SymboleSimple symbole = new SymboleSimple(t);
            TableSymbole.getInstance().ajouter(entree, symbole);
            RESULT = 1;
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("LPARAMS",13, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LPARAMS ::= LPARAMS POINTVIRGULE TYPE IDF 
            {
              Integer RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).right;
		Integer lp = (Integer)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
			EntreeParam entree = new EntreeParam(i);
            SymboleSimple symbole = new SymboleSimple(t);
            TableSymbole.getInstance().ajouter(entree, symbole);
			RESULT = lp+1;
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("LPARAMS",13, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FONC ::= FONCTION IDF PAROUV PARFER DEBUT LINSTR RETOURNE EXPR POINTVIRGULE FIN 
            {
              Instruction RESULT =null;
		int nameFoncleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-8)).left;
		int nameFoncright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-8)).right;
		String nameFonc = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-8)).value;
		int lIleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).left;
		int lIright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).right;
		BlocDInstructions lI = (BlocDInstructions)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		
			System.out.println("Fonction sans paramètre et retour");
			TableSymbole.getInstance().ajouter(new EntreeFonction(nameFonc, 0), new SymboleFonction(null));
			RESULT = new FonctionsSansParam(nameFonc, lI, new RetourneFonction(nameFonc, e));
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("FONC",9, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-9)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FONC ::= FONCTION IDF PAROUV LPARAMS PARFER DEBUT LINSTR RETOURNE EXPR POINTVIRGULE FIN 
            {
              Instruction RESULT =null;
		int nameFoncleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-9)).left;
		int nameFoncright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-9)).right;
		String nameFonc = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-9)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-7)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-7)).right;
		Integer lp = (Integer)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-7)).value;
		int lIleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).left;
		int lIright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).right;
		BlocDInstructions lI = (BlocDInstructions)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		
			System.out.println("Fonction avec paramètre et retour");
			System.out.println("nbParams: "+lp);
			TableSymbole.getInstance().entreeBloc();
			System.out.println("numBloc "+TableSymbole.getInstance().getNoRegion());
			TableSymbole.getInstance().ajouter(new EntreeFonction(nameFonc, lp), new SymboleFonction("entier"));
			RESULT = new FonctionsAvecParam(nameFonc, lI, lp, new RetourneFonction(nameFonc, e));
			System.out.println("ttttest");
			TableSymbole.getInstance().sortieBloc();
			System.out.println("numBloc "+TableSymbole.getInstance().getNoRegion());
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("FONC",9, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-10)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CSTE ::= CONSTANTEBOOL 
            {
              Expression RESULT =null;
		int csteleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int csteright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		String cste = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new ConstanteBool(cste, csteleft+1); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CSTE",11, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CSTE ::= CONSTANTEINT 
            {
              Expression RESULT =null;
		int csteleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int csteright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		String cste = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new ConstanteEntiere(cste, csteleft+1); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CSTE",11, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDITION ::= SI EXPR ALORS SINON FINSI 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).value;
		
			RESULT=new Condition(e, null, null, eleft+1);
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CONDITION",6, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONDITION ::= SI EXPR ALORS SINON LINSTR FINSI 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).value;
		int lIleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int lIright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDInstructions lI = (BlocDInstructions)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
			RESULT=new Condition(e, null, lI, eleft+1);
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CONDITION",6, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONDITION ::= SI EXPR ALORS LINSTR SINON FINSI 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).value;
		int lIleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int lIright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		BlocDInstructions lI = (BlocDInstructions)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		
			RESULT=new Condition(e, lI, null, eleft+1);
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CONDITION",6, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONDITION ::= SI EXPR ALORS LINSTR SINON LINSTR FINSI 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).value;
		int lI1left = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).left;
		int lI1right = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).right;
		BlocDInstructions lI1 = (BlocDInstructions)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).value;
		int lI2left = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int lI2right = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDInstructions lI2 = (BlocDInstructions)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
			RESULT=new Condition(e, lI1, lI2, eleft+1);
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CONDITION",6, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-6)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONDITION ::= SI EXPR ALORS FINSI 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		
			RESULT=new Condition(e, null, null, eleft+1);
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CONDITION",6, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONDITION ::= SI EXPR ALORS LINSTR FINSI 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).value;
		int lIleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int lIright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDInstructions lI = (BlocDInstructions)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
			RESULT=new Condition(e, lI, null, eleft+1);
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CONDITION",6, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BOUCLE ::= TANTQUE EXPR REPETER LINSTR FINTANTQUE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).value;
		int lIleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int lIright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDInstructions lI = (BlocDInstructions)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
			RESULT=new Boucle(eleft+1, e, lI);
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("BOUCLE",8, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ECRIRE ::= ECR CSTECHAINE POINTVIRGULE 
            {
              Instruction RESULT =null;
		int csteleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int csteright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		String cste = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
			RESULT=new EcrireString(cste,csteleft+1);
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("ECRIRE",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ECRIRE ::= ECR EXPR POINTVIRGULE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
			RESULT=new EcrireExpression(e);
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("ECRIRE",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AFFECT ::= IDF EGAL EXPR POINTVIRGULE 
            {
              Instruction RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).right;
		String idf = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
			RESULT = new Affectation(idf, e);
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("AFFECT",4, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPR ::= IDF 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new Variable(i, ileft+1); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPR ::= IDF PAROUV LPARAM PARFER 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		ArrayList<Expression> lp = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		 System.out.println("LP");
        	RESULT=new AppelFonction(i, ileft, lp); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPR ::= IDF PAROUV PARFER 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		 RESULT=new AppelFonction(i, ileft); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPR ::= PAROUV EXPR PARFER 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		 RESULT = e; 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPR ::= CSTE 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = c; 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPR ::= NON EXPR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new NonLogique(e); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPR ::= EXPR OU EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new OuLogique(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPR ::= EXPR ET EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new EtLogique(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPR ::= MOINS EXPR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new MoinsUnaire(e); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPR ::= EXPR DIFF EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new Different(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPR ::= EXPR EGALEGAL EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new Egal(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPR ::= EXPR SUP EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new Superieur(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPR ::= EXPR INF EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new Inferieur(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPR ::= EXPR DIV EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new Div(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPR ::= EXPR MULT EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new Mult(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPR ::= EXPR MOINS EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new Moins(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPR ::= EXPR PLUS EXPR 
            {
              Expression RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		Expression g = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = new Plus(g, d); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("EXPR",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= ECRIRE 
            {
              Instruction RESULT =null;
		int ecrleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int ecrright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Instruction ecr = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT=ecr; 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= LIRE IDF POINTVIRGULE 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		 RESULT=new Lire(i, ileft+1); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= CONDITION 
            {
              Instruction RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Instruction con = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT=con; 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= BOUCLE 
            {
              Instruction RESULT =null;
		int bouleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int bouright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Instruction bou = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT=bou; 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= AFFECT 
            {
              Instruction RESULT =null;
		int affleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int affright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Instruction aff = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT=aff; 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARATION ::= FONC 
            {
              Instruction RESULT =null;
		int foncleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int foncright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Instruction fonc = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
				System.out.println("FONCTION");
				RESULT = fonc;
			 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("DECLARATION",7, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARATION ::= TYPE IDF POINTVIRGULE 
            {
              Instruction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int idfleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		String idf = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		 TableSymbole.getInstance().ajouter(new EntreeVariable(idf), new SymboleSimple(t)); 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("DECLARATION",7, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LPARAM ::= EXPR 
            {
              ArrayList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
		    ArrayList<Expression> expressions = new ArrayList<Expression>();
		    expressions.add(e);
			//TableSymbole.getInstance().ajouter(new EntreeParam(idf), new SymboleSimple(t));
			RESULT = expressions;
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("LPARAM",12, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LPARAM ::= LPARAM POINTVIRGULE EXPR 
            {
              ArrayList<Expression> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		ArrayList<Expression> c = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
		    c.add(e);
			RESULT = c;
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("LPARAM",12, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LDECL ::= DECLARATION 
            {
              BlocDInstructions RESULT =null;
		int decl2left = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int decl2right = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Instruction decl2 = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
			BlocDInstructions dec = new BlocDInstructions(decl2left+1, null);
			if (decl2 != null) dec.ajouter(decl2);
			RESULT = dec;
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("LDECL",2, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LDECL ::= LDECL DECLARATION 
            {
              BlocDInstructions RESULT =null;
		int ldeclleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int ldeclright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDInstructions ldecl = (BlocDInstructions)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		int decl1left = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int decl1right = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Instruction decl1 = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
			if (decl1 != null) ldecl.ajouter(decl1);
			System.out.println("LDEC :"+ldecl);
			RESULT = ldecl;
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("LDECL",2, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LINSTR ::= INSTRUCTION 
            {
              BlocDInstructions RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Instruction I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
			//System.out.println(I+" "+Ileft+" "+Iright);
			BlocDInstructions lI = new BlocDInstructions(Ileft+1, null);
			lI.ajouter(I);
			RESULT = lI;
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("LINSTR",1, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LINSTR ::= LINSTR INSTRUCTION 
            {
              BlocDInstructions RESULT =null;
		int lIleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int lIright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDInstructions lI = (BlocDInstructions)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Instruction I = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
			lI.ajouter(I);
			RESULT = lI;
		
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("LINSTR",1, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROG ::= PROGRAMME IDF DEBUT LDECL FIN 
            {
              BlocDInstructions RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDInstructions ld = (BlocDInstructions)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
			    System.out.println("LDECLLLLL :"+ld);
				// Retourner le ld pour verif et toMIPS les fonctions
				RESULT = new BlocDInstructions(0, ld);
			
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROG ::= PROGRAMME IDF DEBUT LINSTR FIN 
            {
              BlocDInstructions RESULT =null;
		int lIleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int lIright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDInstructions lI = (BlocDInstructions)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		 RESULT = lI; 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= PROGRAMME IDF DEBUT LDECL LINSTR FIN 
            {
              BlocDInstructions RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		BlocDInstructions ld = (BlocDInstructions)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int lIleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int lIright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDInstructions lI = (BlocDInstructions)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
				// Retourner le ld pour verif et toMIPS les fonctions
				System.out.println("LDECLLLLL :"+ld);
				lI.addLDecl(ld);
				RESULT = lI;
			
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDInstructions start_val = (BlocDInstructions)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		RESULT = start_val;
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalyseurSyntaxique$parser.done_parsing();
          return CUP$AnalyseurSyntaxique$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

